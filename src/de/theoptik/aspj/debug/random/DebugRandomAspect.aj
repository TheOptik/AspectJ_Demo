package de.theoptik.aspj.debug.random;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;

public aspect DebugRandomAspect {

	private Map<Random, Integer> numberOfCalls = new HashMap<>();

	pointcut anyCallToRandom() : call(* Random.*(..));

	before()  : anyCallToRandom(){

		if (thisJoinPoint.getSignature().getName().contains("next")) {
			try {
				Random random = ((Random) thisJoinPoint.getTarget());

				if (!numberOfCalls.containsKey(random)) {
					numberOfCalls.put(random, 0);
				}
				numberOfCalls.put(random, numberOfCalls.get(random) + 1);

				Field field = Random.class.getDeclaredField("seed");

				field.setAccessible(true);

				AtomicLong seed = (AtomicLong) field.get(random);

				System.out.println("______");
				System.out.println("Generating new Random Number using the Method: " + thisJoinPoint.getSignature().getName());
				System.out.println("seed: " + seed);
				System.out.println("this is the " + numberOfCalls.get(random) + "th number generated by this Random Object.");
				System.out.println("______");
			} catch (Exception e) {
			}
		}
	}

}
